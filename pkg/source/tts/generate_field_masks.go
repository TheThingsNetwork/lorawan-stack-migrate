// Copyright Â© 2024 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//go:build ignore
// +build ignore

package main

import (
	"bytes"
	"go/format"
	"log"
	"os"
	"text/template"

	"go.thethings.network/lorawan-stack-migrate/pkg/source/tts"
	"go.thethings.network/lorawan-stack/v3/pkg/ttnpb"
)

func init() {
	log.SetOutput(os.Stderr)
	log.SetFlags(0)
}

func main() {
	referenceFieldTree := make(tts.FieldTree).Add(ttnpb.BottomLevelFields(ttnpb.EndDeviceFieldPathsNested)...)

	fields := make(map[string][]string)
	for component, rpcPath := range map[string]string{
		"identityServer":    "/ttn.lorawan.v3.EndDeviceRegistry/Get",
		"networkServer":     "/ttn.lorawan.v3.NsEndDeviceRegistry/Get",
		"applicationServer": "/ttn.lorawan.v3.AsEndDeviceRegistry/Get",
		"joinServer":        "/ttn.lorawan.v3.JsEndDeviceRegistry/Get",
	} {
		allowedFields := ttnpb.ExcludeFields(ttnpb.RPCFieldMaskPaths[rpcPath].Allowed, "claim_authentication_code")
		fields[component] = tts.CompressFields(allowedFields, referenceFieldTree)
	}

	buf := &bytes.Buffer{}
	if err := template.Must(template.New("field_masks").Parse(
		`// Code generated by generate_field_masks.go. DO NOT EDIT.

package tts

var (
	{{- range $component, $fields := . }}
	{{ $component }}GetFieldMask = []string{
		{{- range $i, $field := $fields }}
		{{ printf "%q" $field }},
		{{- end }}
	}
	{{- end }}
)`)).Execute(buf, fields); err != nil {
		log.Fatalf("Failed to execute template: %s", err)
	}
	b, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalf("Failed to format source: %s", err)
	}
	if err := os.WriteFile("field_masks_generated.go", b, 0o644); err != nil {
		log.Fatalf("Failed to write output: %s", err)
	}
}
